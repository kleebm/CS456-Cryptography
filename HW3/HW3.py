dump = False
import fileinput
def findModularInverse(a, mod):
			
	while(a < 0):
		a = a + mod
	
	#a = a % mod
	
	x1 = 1; x2 = 0; x3 = mod
	y1 = 0; y2 = 1; y3 = a
	
	q = int(x3 / y3)
	t1 = x1 - q*y1
	t2 = x2 - q*y2
	t3 = x3 - (q*y3)
	
	if dump == True:
		print("q\tx1\tx2\tx3\ty1\ty2\ty3\tt1\tt2\tt3")
		print("----------------------------------------------------------------------------")
		print(q,"\t",x1,"\t",x2,"\t",x3,"\t",y1,"\t",y2,"\t",y3,"\t",t1,"\t",t2,"\t",t3)
	
	while(y3 != 1):
		x1 = y1; x2 = y2; x3 = y3
		
		y1 = t1; y2 = t2; y3 = t3
		
		q = int(x3 / y3)
		t1 = x1 - q*y1
		t2 = x2 - q*y2
		t3 = x3 - (q*y3)
		
		if dump == True:
			print(q,"\t",x1,"\t",x2,"\t",x3,"\t",y1,"\t",y2,"\t",y3,"\t",t1,"\t",t2,"\t",t3)
			print("----------------------------------------------------------------------------")
			print("")
	
	while(y2 < 0):
		y2 = y2 + mod
	
	return y2


def main():
	p = 19784687219197810708824776052092583225876159153173787729854224230803296604434283629769264620887279174576877635928878190906448607381768307782587351267379827
	q = 9892343609598905354412388026046291612938079576586893864927112115401648302217141814884632310443639587288438817964439095453224303690884153891293675633689913
	g = 3550421120587442335075824423610129903945255496457204069265520343827541000304624245835400536834378846050317364075776900966004128197212379442233364083288799
	b = 19536677647843667627863559419898539567811866072660242570052258424371725302930211839036825506567141369799315476571227218348489613014603989390202692918148271
	#hidden key a from assignment 4
	a = 7043898314006318326115940780032836020708457705643306740966786874458975733455837047675402416635877437320813967832253932800054266068442549850174403900383164
	with open(r"C:\Users\bklee\Documents\School\Senior Year\Crypto\HW3\a3.cipher.txt", "r") as file:
		for _,line in enumerate(file):
			tokens = line.split(",")
			halfmask = int(tokens[0])
			ciphertext = int(tokens[1])
			alpha_to_b = pow(halfmask, a, p)
			plaintext = (ciphertext * findModularInverse(alpha_to_b,p) % p)
			print(chr(plaintext), end='')

if __name__ == "__main__":
    main()